using UnityEngine;

namespace Stage.Players
{
    public class PlayerParryState : IState
    {
        Player _player;
        Vector3 _velocity;      // 移動方向と速度

        // データキャッシュ用
        float _moveSpeed;
        float _rotSpeed;
        Vector2 _moveWindow;

        public PlayerParryState(Player player)
        {
            _player = player;

            _moveSpeed = PlayerData.Data.ParryMoveSpd;
            _rotSpeed = PlayerData.Data.ParryRotSpd;
            _moveWindow = PlayerData.Data.ParryMoveWindow;
        }

        public void Enter()
        {
            _player.Animation.Parry();
        }

        public void Update()
        {
            // === 移動計算 ===
            _velocity = _player.transform.forward * _moveSpeed;

            // === 回転 ===
            // カメラから見たときの旋回方向を取得
            Vector2 input = _player.Action.Player.Move.ReadValue<Vector2>();
            Transform cam = Camera.main.transform;
            Vector3 direction = ((cam.forward * input.y) + (cam.right * input.x)).normalized;
            direction = Vector3.ProjectOnPlane(direction, _player.NormalVector);
            //制限を設け回転
            Quaternion targetRot = _player.transform.rotation;
            if (direction.magnitude > 0.001f)
                targetRot = Quaternion.LookRotation(direction);
            float rotSpeed = _rotSpeed * Time.deltaTime;
            if (IsInMoveWindow())
                _player.transform.rotation = 
                Quaternion.RotateTowards(_player.transform.rotation, targetRot, rotSpeed);

            // === 状態遷移 ===
            // 待機
            if (_player.Animation.IsAnimFinished(PlayerAnimation.HashParry))
                _player.StateMachine.TransitionTo(PlayerState.Idle);
        }

        public void FixedUpdate()
        {
            // === 移動 ===
            if (IsInMoveWindow())
                _player.Rigidbody.velocity = _velocity;
        }

        public void Exit()
        {

        }

        /// <summary>
        /// アニメーションの再生割合が
        /// 移動可能区間かどうかを返却
        /// </summary>
        /// <returns>true:移動可能, false:移動不可</returns>
        bool IsInMoveWindow()
        {
            float start = _moveWindow.x;
            float end = _moveWindow.y;
            float progress = _player.Animation.CheckAnimRatio(PlayerAnimation.HashParry);

            return progress >= start && progress <= end;
        }
    }
}